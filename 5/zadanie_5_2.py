import zadanie_5_1 as cimport redef check_precedence(stack, ope):    return precedence[ope] <= precedence[stack[len(stack) - 1]]precedence = {' * ': 1, ' + ': 0, ' - ': 0}out = []stack = []i = 0print("Enter the equation. E.g. (2 3) + (3 4) - (-1 0.9) * (2 0) ")test = input()s = re.findall(r"\(([\-0-9. ]+)\)", test)operators = re.findall(r" [+\-*/ ] ", test)for ope in operators:   s.insert(i*2 + 1, ope)   i = i + 1i = 0for i in range(0, len(s), 2):    x = c.Complex(list(map(float, s[i].split()))[0], list(map(float, s[i].split()))[1])    s.remove(s[i])    s.insert(i, x)#The Shunting Yard Algorithmfor x in s:    if str(type(x)) == '<class \'zadanie_5_1.Complex\'>':        out.append(x)    else:        while stack and check_precedence(stack, x):            out.append(stack[len(stack) - 1])            stack.pop()        stack.append(x)stack.reverse()for x in stack:    out.append(x)numb = c.Complex(0, 0)numb1 = c.Complex(0, 0)numb2 = c.Complex(0, 0)i = 0while len(out) != 1:    i = 0    for x in out:        if str(type(x)) == '<class \'zadanie_5_1.Complex\'>':            numb1 = numb2            numb2 = x        else:            if x == ' + ':                numb = numb1.add(numb2)            elif x == ' - ':                numb = numb1.sub(numb2)            elif x == ' * ':                numb = numb1.mult(numb2)            else:                print("Error! Unrecognized operator")            out.pop(i)            out.pop(i - 1)            out.pop(i - 2)            out.insert(i - 2, numb)            break        i = i + 1print("(" + str(out[0].r), str(out[0].i) + ")")